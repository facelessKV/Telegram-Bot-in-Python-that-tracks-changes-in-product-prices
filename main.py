import logging
import sqlite3
import requests
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime, time as dt_time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
AWAITING_URL, AWAITING_REMOVE_INDEX = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:
    # - id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    # - user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # - url: —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
    # - current_price: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    # - last_checked: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
    # - added_on: –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        url TEXT,
        current_price REAL,
        last_checked TEXT,
        added_on TEXT
    )
    ''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "/remove - —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ —Å–æ–æ–±—â—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add (—à–∞–≥ 1)
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n"
        "(–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
    )
    return AWAITING_URL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add (—à–∞–≥ 2)
async def process_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    url = update.message.text
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ
    if not url.startswith(('http://', 'https://')):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://")
        return ConversationHandler.END
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ...")
        price = get_price(url)
        
        if price is None:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–æ–±—ã—á–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω."
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('price_tracker.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ
        cursor.execute("SELECT id FROM products WHERE user_id = ? AND url = ?", (user_id, url))
        if cursor.fetchone():
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
            conn.close()
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute(
            "INSERT INTO products (user_id, url, current_price, last_checked, added_on) VALUES (?, ?, ?, ?, ?)",
            (user_id, url, price, now, now)
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}.\n"
            f"üîÑ –Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, url, current_price, last_checked FROM products WHERE user_id = ? ORDER BY added_on DESC",
        (user_id,)
    )
    products = cursor.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text(
            "üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add"
        )
        return
    
    message = "üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    for i, (prod_id, url, price, checked) in enumerate(products, 1):
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        display_url = url if len(url) < 40 else url[:37] + "..."
        message += f"{i}. {display_url}\n   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}\n   üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {checked}\n\n"
    
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove (—à–∞–≥ 1)
async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, url FROM products WHERE user_id = ? ORDER BY added_on DESC",
        (user_id,)
    )
    products = cursor.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text("üîç –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['products'] = products
    
    message = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, (prod_id, url) in enumerate(products, 1):
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        display_url = url if len(url) < 40 else url[:37] + "..."
        message += f"{i}. {display_url}\n"
    
    message += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    
    await update.message.reply_text(message)
    return AWAITING_REMOVE_INDEX

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove (—à–∞–≥ 2)
async def process_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–¥–µ–∫—Å —Å–ø–∏—Å–∫–∞ (—Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 1)
        index = int(update.message.text) - 1
        products = context.user_data.get('products', [])
        
        if 0 <= index < len(products):
            product_id = products[index][0]
            product_url = products[index][1]
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('price_tracker.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
            conn.commit()
            conn.close()
            
            display_url = product_url if len(product_url) < 40 else product_url[:37] + "..."
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {display_url}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'products' in context.user_data:
        del context.user_data['products']
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    if 'products' in context.user_data:
        del context.user_data['products']
    
    await update.message.reply_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
def get_price(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤.
    
    Args:
        url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        float: –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ü–µ–Ω—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –¥–ª—è URL: {url}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
        domain = extract_domain(url)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–æ–º–µ–Ω: {domain}")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        if domain == 'rozetka.ua' or domain == 'rozetka.com.ua' or 'rozetka' in domain:
            price = get_rozetka_price(soup)
            if price is not None:
                return price
        
        elif domain == 'intertop.ua' or 'intertop' in domain:
            price = get_intertop_price(soup)
            if price is not None:
                return price
        
        # –û–±—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        price = get_generic_price(soup, domain)
        if price is not None:
            return price
        
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –¥–ª—è {url}")
        return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

def extract_domain(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–∑ URL"""
    try:
        # –£–¥–∞–ª—è–µ–º http:// –∏–ª–∏ https://
        if '://' in url:
            url = url.split('://')[1]
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–µ—à–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        url = url.split('/')[0]
        url = url.split('?')[0]
        
        # –£–¥–∞–ª—è–µ–º www. –µ—Å–ª–∏ –µ—Å—Ç—å
        if url.startswith('www.'):
            url = url[4:]
            
        return url
    except:
        return url

def get_rozetka_price(soup):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É —Å —Å–∞–π—Ç–∞ –†–æ–∑–µ—Ç–∫–∞"""
    rozetka_selectors = [
        'p.product-prices__big',          # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
        'span.product-prices__big',       # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        '.product-price__big',            # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        '.product-price__value',          # –°—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        '.product-carriage__price'        # –ï—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    ]
    
    for selector in rozetka_selectors:
        price_element = soup.select_one(selector)
        if price_element:
            price_text = price_element.get_text().strip()
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ –†–æ–∑–µ—Ç–∫–µ: {price_text}")
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            price_nums = re.findall(r'\d+', price_text)
            if price_nums:
                # –°–æ–µ–¥–∏–Ω—è–µ–º —Ü–∏—Ñ—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–±–µ–ª—ã, –∑–Ω–∞–∫–∏ –≤–∞–ª—é—Ç—ã –∏ —Ç.–¥.)
                price_str = ''.join(price_nums)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ –≤ –†–æ–∑–µ—Ç–∫–µ —É–∂–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö)
                price = float(price_str)
                return price
    return None

def get_intertop_price(soup):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É —Å —Å–∞–π—Ç–∞ –ò–Ω—Ç–µ—Ä—Ç–æ–ø"""
    intertop_selectors = [
        '.product-price',                # –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
        '.price-current',                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        '.product-price__current',       # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        '.product-price-current',        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    ]
    
    for selector in intertop_selectors:
        price_element = soup.select_one(selector)
        if price_element:
            price_text = price_element.get_text().strip()
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ –ò–Ω—Ç–µ—Ä—Ç–æ–ø–µ: {price_text}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            price_str = re.sub(r'[^\d.,]', '', price_text)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float
            price_str = price_str.replace(',', '.')
            
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫, —Ç–æ –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
            if price_str.count('.') > 1:
                parts = price_str.split('.')
                price_str = ''.join(parts[:-1]) + '.' + parts[-1]
            
            try:
                price = float(price_str)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ —Ü–µ–Ω–∞ —Å –ò–Ω—Ç–µ—Ä—Ç–æ–ø–∞: {price}")
                return price
            except ValueError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ: {price_str}")
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –≤ JSON-–¥–∞–Ω–Ω—ã—Ö (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö)
    scripts = soup.find_all('script', type='application/ld+json')
    for script in scripts:
        try:
            data = json.loads(script.string)
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º —Ü–µ–Ω—É –≤ JSON
            def find_price(obj):
                if isinstance(obj, dict):
                    for key in ['price', 'Price', 'currentPrice', 'CurrentPrice']:
                        if key in obj:
                            try:
                                return float(obj[key])
                            except (ValueError, TypeError):
                                pass
                    
                    # –ò—â–µ–º –≤ –ø–æ–¥–æ–±—ä–µ–∫—Ç–∞—Ö
                    for value in obj.values():
                        price = find_price(value)
                        if price is not None:
                            return price
                
                elif isinstance(obj, list):
                    for item in obj:
                        price = find_price(item)
                        if price is not None:
                            return price
                
                return None
            
            price = find_price(data)
            if price is not None:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ JSON-–¥–∞–Ω–Ω—ã—Ö: {price}")
                return price
        except:
            pass
    
    return None

def get_generic_price(soup, domain):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞"""
    
    # 1. –ü—Ä–æ–±—É–µ–º –∏—â–µ–º —á–µ—Ä–µ–∑ schema.org –º–∏–∫—Ä–æ–¥–∞–Ω–Ω—ã–µ
    items_with_price = soup.find_all(attrs={'itemprop': 'price'})
    for item in items_with_price:
        content = item.get('content')
        if content:
            try:
                return float(content)
            except (ValueError, TypeError):
                pass
    
    # 2. –ò—â–µ–º –ø–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º —Ü–µ–Ω
    price_selectors = [
        'span.price', 'div.price', 'p.price', '.price-box', '.product-price', '.current-price',
        '.price-current', '.price_num', '.price-value', '.actual-price', '.special-price',
        '[data-price]', '[itemprop="price"]', '.main-price', '.new-price', '.sale-price',
        '.our_price', '.price-container', '.now-price', '.card-price', '.price-pdp',
        '.promo-price', '.item-price', '.product-card-price', '.product__price',
        '.money', '.final-price', '.current_price', '.amount', '.price-amount',
        '.product_price', '.price-label', '.product-cost', '.offer-price', 
        '.regular-price', '.price-number', '.price__current'
    ]
    
    for selector in price_selectors:
        price_elements = soup.select(selector)
        if price_elements:
            price_text = price_elements[0].get_text().strip()
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {price_text}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞
            price_value = extract_price_from_text(price_text, domain)
            if price_value is not None:
                return price_value
    
    # 3. –ò—â–µ–º —á–µ—Ä–µ–∑ meta —Ç–µ–≥–∏, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è —Ü–µ–Ω
    meta_price_props = ['og:price:amount', 'product:price:amount', 'price', 'product:price']
    
    for prop in meta_price_props:
        meta_element = soup.find('meta', property=prop) or soup.find('meta', attrs={'name': prop})
        if meta_element and meta_element.get('content'):
            content = meta_element.get('content').strip()
            try:
                price = float(content)
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ –º–µ—Ç–∞-—Ç–µ–≥–µ {prop}: {price}")
                return price
            except (ValueError, TypeError):
                pass
    
    # 4. –ò—â–µ–º —Ü–µ–Ω—É –≤ JSON-–¥–∞–Ω–Ω—ã—Ö (—á–∞—Å—Ç–æ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö)
    scripts = soup.find_all('script')
    price_patterns = [
        r'"price"\s*:\s*(\d+\.?\d*)',  # "price": 1234.56
        r'"price":\s*"(\d+\.?\d*)"',   # "price": "1234.56"
        r'price\s*:\s*(\d+\.?\d*)',    # price: 1234.56
        r'price\s*=\s*(\d+\.?\d*)',    # price = 1234.56
    ]
    
    for script in scripts:
        if script.string:
            for pattern in price_patterns:
                matches = re.search(pattern, script.string)
                if matches and matches.group(1):
                    try:
                        price = float(matches.group(1))
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ: {price}")
                        return price
                    except (ValueError, TypeError):
                        pass
    
    # 5. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∏—â–µ–º —á—Ç–æ —É–≥–æ–¥–Ω–æ, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É
    # –°–º–æ—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–Ω—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    price_containers = soup.find_all(['div', 'span', 'p', 'strong', 'b', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
    
    # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π
    currency_pattern = re.compile(r'(\d[\d\s,.]*[\d,.])(?:\s*(?:–≥—Ä–Ω|‚Ç¥|\$|‚Ç¨|—Ä—É–±|‚ÇΩ|UAH|USD|EUR))', re.IGNORECASE)
    
    for container in price_containers:
        if container.string:
            match = currency_pattern.search(container.string)
            if match:
                price_str = match.group(1)
                price_value = extract_price_from_text(price_str, domain)
                if price_value is not None:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –≤–∞–ª—é—Ç–µ: {price_value}")
                    return price_value
    
    # –ù–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—É
    return None

def extract_price_from_text(price_text, domain):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.
    """
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
        price_str = re.sub(r'[^\d.,]', '', price_text)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –∑–Ω–∞—á–∏—Ç –Ω–µ –Ω–∞—à–ª–∏ —Ü–∏—Ñ—Ä
        if not price_str:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—è—Ç—ã—Ö - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
        if price_str.count(',') > 1:
            price_str = price_str.replace(',', '')
        
        # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –æ–Ω–∏ —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        if price_str.count('.') > 1:
            parts = price_str.split('.')
            price_str = ''.join(parts[:-1]) + '.' + parts[-1]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–ø—è—Ç–∞—è, –∏ —Ç–æ—á–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if ',' in price_str and '.' in price_str:
            # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω –∑–∞–ø—è—Ç–∞—è - –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            # –í –°–®–ê –∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏ —Ç–æ—á–∫–∞ - –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ –¥–æ–º–µ–Ω—É –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            ua_domains = ['ua', '—É–∫—Ä', '—Ä—Ñ', 'ru']
            if any(d in domain for d in ua_domains):
                # –î–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö, —Ä—É—Å—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ –∑–∞–ø—è—Ç–∞—è - –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                price_str = price_str.replace('.', '').replace(',', '.')
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ (–∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á)
                price_str = price_str.replace(',', '')
        elif ',' in price_str:
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            price_str = price_str.replace(',', '.')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        price = float(price_str)
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ —Ü–µ–Ω—ã
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö/—Ü–µ–Ω—Ç–∞—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä, 14.98 –º–æ–∂–µ—Ç –±—ã—Ç—å 14.98 –≥—Ä–Ω, –Ω–æ 1498 —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ 14.98 –≥—Ä–Ω
        if price < 1 and len(price_str.replace('.', '')) > 2:
            price *= 100
        elif price < 5 and len(price_str.replace('.', '')) > 3:
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä - —Å–∫–æ—Ä–µ–µ –æ—à–∏–±–∫–∞ –º–∞—Å—à—Ç–∞–±–∞
            price *= 100
            
        return price
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ '{price_text}': {e}")
        return None

async def check_prices(context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º
    –∑–∞–ø–∏—Å—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏,
    –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω...")
    
    conn = sqlite3.connect('price_tracker.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, user_id, url, current_price FROM products")
    products = cursor.fetchall()
    
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    updated_count = 0
    failed_count = 0
    
    for prod_id, user_id, url, old_price in products:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            new_price = get_price(url)
            
            if new_price is None:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {url}")
                failed_count += 1
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute(
                "UPDATE products SET last_checked = ? WHERE id = ?",
                (now, prod_id)
            )
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Ä–æ–≥ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
            if abs(new_price - old_price) > 0.01:
                cursor.execute(
                    "UPDATE products SET current_price = ? WHERE id = ?",
                    (new_price, prod_id)
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã—Ä–æ—Å–ª–∞ –∏–ª–∏ —É–ø–∞–ª–∞ —Ü–µ–Ω–∞
                change = new_price - old_price
                change_pct = (change / old_price) * 100
                
                if change > 0:
                    emoji = "üìà"
                    change_text = f"—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ {change_pct:.1f}%"
                else:
                    emoji = "üìâ" 
                    change_text = f"—Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {abs(change_pct):.1f}%"
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                display_url = url if len(url) < 40 else url[:37] + "..."
                message = (
                    f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n"
                    f"–¢–æ–≤–∞—Ä: {display_url}\n"
                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price}\n"
                    f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price}\n"
                    f"–¶–µ–Ω–∞ {change_text}"
                )
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=message)
                    updated_count += 1
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è {url}: {e}")
            failed_count += 1
    
    conn.commit()
    conn.close()
    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –æ—à–∏–±–æ–∫: {failed_count}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    application = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    add_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_command)],
        states={
            AWAITING_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_url)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(add_conv_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    remove_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("remove", remove_command)],
        states={
            AWAITING_REMOVE_INDEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_remove)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(remove_conv_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω (–≤ 9:00 —É—Ç—Ä–∞)
    job_queue = application.job_queue
    job_queue.run_daily(check_prices, time=dt_time(hour=9, minute=0))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()